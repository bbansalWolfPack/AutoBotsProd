---

- hosts: nodes
  gather_facts: no

  # roles:
  #   - geerlingguy.nodejs

  pre_tasks:
    - name: Install Python
      raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)

    - name: Turn on gather_facts
      setup:

  tasks:

    - name: SERVER | Download the nvm(node version manager) install script
      get_url: url=https://nodejs.org/dist/v6.11.3/node-v6.11.3-linux-x64.tar.gz dest=/root

    - name: create temp directory
      file:
       path: /opt/nodejs
       state: directory
       mode: 0755

    - name: Extract tar gz file
      unarchive:
        src: /root/node-v6.11.3-linux-x64.tar.gz
        dest: /opt/nodejs
        remote_src: yes

    - stat: path=/opt/nodejs/6.11.3
      register: nodeDir
      tags:
        - testbhavya

    - debug:
        msg: "{{nodeDir}}"
      tags:
        - testbhavya

    - name: rename the unzipped file
      shell: mv node-v6.11.3-linux-x64 6.11.3
      args:
        chdir: /opt/nodejs
      when: nodeDir.stat.isdir is not defined
      tags:
        - testbhavya

    - stat: path=/opt/nodejs/current
      register: linkCurrent
      tags:
        - testNew

    - name: remove symlink if it exists
      file:
        path: /opt/nodejs/current
        state: absent
      when: linkCurrent.stat.islnk is defined and linkCurrent.stat.islnk
      tags:
        - testNew

    - name: cd and create sym link
      shell: cd /opt/nodejs && ln -s 6.11.3 current
      tags:
        - testNew

    - stat: path=/bin/node
      register: linkNode
      tags:
        - testNew

    - name: remove symlink if it exists
      file:
        path: /bin/node
        state: absent
      when: linkNode.stat.islnk is defined and linkNode.stat.islnk
      tags:
        - testNew

    - name: create symlink to node library
      shell: ln -s /opt/nodejs/current/bin/node /bin/node
      tags:
        - testNew

    - name: Install packages
      become: yes
      apt:
        update_cache: yes
        pkg: "{{item}}"
        state: present
      with_items:
        - git
        - python-pip
        - npm

    - name: Add mongo ppa key
      become: yes
      apt_key: >
         keyserver=hkp://keyserver.ubuntu.com:80
         id=7F0CEB10
         state=present

    - name: Add mongo sources list
      become: yes
      lineinfile: >
        line="deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse"
        dest=/etc/apt/sources.list.d/mongodb.list
        state=present
        create=yes

    - name: Install mongo
      become: yes
      apt: name=mongodb-org state=latest force=yes update_cache=yes

    - name: create data directory for mongo
      become: yes
      file:
       path: /data/db
       state: directory
       mode: 0755

    - set_fact:
          DEPLOYMENTTOKEN: "{{ lookup('env','DEPLOYMENTTOKEN') }}"

    - set_fact:
        SLACKTOKEN: "{{ lookup('env','SLACKTOKEN') }}"

    - set_fact:
        APIAITOKEN: "{{ lookup('env','APIAITOKEN') }}"

    - set_fact:
        AUTOBOTEMAILPASSWORD: "{{ lookup('env','AUTOBOTEMAILPASSWORD') }}"

    - set_fact:
        PRIVATEKEYID: "{{ lookup('env','PRIVATEKEYID') }}"
      tags:
        - test0
    - set_fact:
        KEYFILE: /root/SlackBot/keyfile.json

    - set_fact:
        PRIVATEKEY: "{{ lookup('env','PRIVATEKEY') }}"
      tags:
        - test0

    - set_fact:
        CLIENTEMAIL: "{{ lookup('env','CLIENTEMAIL') }}"
      tags:
        - test0

    - set_fact:
        CLIENTID: "{{ lookup('env','CLIENTID') }}"
      tags:
        - test0

    - name: add digital ocean token to bashrc
      become: yes
      lineinfile:
        line="export DOTOKEN={{DEPLOYMENTTOKEN}}"
        dest=/root/.bashrc
        state=present
        create=yes

    - name: add API AI Token to bashrc
      become: yes
      lineinfile:
        line="export APIAITOKEN={{APIAITOKEN}}"
        dest=/root/.bashrc
        state=present
        create=yes

    - name: add slackToken to bashrc
      become: yes
      lineinfile:
        line="export SLACKTOKEN={{SLACKTOKEN}}"
        dest=/root/.bashrc
        state=present
        create=yes

    - name: add autobotemail to bashrc
      become: yes
      lineinfile:
        line="export AUTOBOTEMAILPASSWORD={{AUTOBOTEMAILPASSWORD}}"
        dest=/root/.bashrc
        state=present
        create=yes

    - name: add clien email to bashrc
      become: yes
      lineinfile:
        line="export KEYFILE={{KEYFILE}}"
        dest=/root/.bashrc
        state=present
        create=yes

    - name: restart server
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: yes
      become_method: sudo
      ignore_errors: true
      tags:
        - test
    - pause:
        seconds: 30
      tags:
        - test

    - name: waiting for server to come back after reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started delay=30 timeout=50 connect_timeout=15
      tags:
        - test

    - name: run mongo daemon
      shell: mongod --fork --logpath /var/log/mongo.logpath
      become: yes

    - name: Generate SSH keys
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates: /root/.ssh/id_rsa

    - name: clone repo
      git:
        repo: 'https://github.com/bbansalWolfPack/AutoBotsProd.git'
        dest: /root/SlackBot/

    - name: download ubuntu ova file from google cloud platform
      get_url:
        url: https://storage.googleapis.com/base_ova_autobot/ubuntu.ova
        dest: /root/SlackBot/serviceManager/packerService/ubuntu/ubuntu.ova
      tags:
        - testgcp

    - name: setup private key id in keyfile
      lineinfile:
        path: /root/SlackBot/keyfile.json
        regexp: "private_key_id"
        line: '"private_key_id": "{{PRIVATEKEYID}}",'
      tags:
        - test0

    - name: setup private key in keyfile
      lineinfile:
          path: /root/SlackBot/keyfile.json
          regexp: 'private_key'
          line: '"private_key": "{{PRIVATEKEY}}",'
      tags:
        - test0

    - name: setup client email in keyfile
      lineinfile:
        path: /root/SlackBot/keyfile.json
        regexp: 'client_email'
        line: '"client_email": "{{CLIENTEMAIL}}",'
      tags:
        - test0

    - name: setup client id in keyfile
      lineinfile:
        path: /root/SlackBot/keyfile.json
        regexp: 'client_id'
        line: '"client_id": "{{CLIENTID}}",'
      tags:
        - test0

    - name: install forever package
      become: yes
      npm: name=forever global=yes state=latest

    - name: install npm packages at core bot
      npm:
        path: /root/SlackBot/core-bot/


    - name: install npm packages at service manager
      npm:
        path: /root/SlackBot/serviceManager/


    - name: install npm packages for email service
      npm:
        path: /root/SlackBot/emailService/

    - pause:
        seconds: 15

    - name: "Check list of Node.js apps running."
      shell: forever list
      register: forever_list
      changed_when: false
      tags:
        - testForever

    # - debug:
    #    msg: "{{forever_list.stdout.find('bot.js')}}"
    #   tags:
    #     - testForever

    - name: run the app using forever previously cloned from github
      become: yes
      shell: KEYFILE="{{KEYFILE}}" APIAITOKEN="{{APIAITOKEN}}" SLACKTOKEN="{{SLACKTOKEN}}" DEPLOYMENTTOKEN="{{DEPLOYMENTTOKEN}}" AUTOBOTEMAILPASSWORD="{{AUTOBOTEMAILPASSWORD}}" forever start bot.js
      args:
        chdir: /root/SlackBot/core-bot
      when: "forever_list.stdout.find('bot.js') == -1"
